CREATE SEQUENCE seq_mountains START WITH 1 NOMAXVALUE MINVALUE 7 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_group START WITH 11 NOMAXVALUE MINVALUE 11 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_groupmembership START WITH 31 MINVALUE 31 NOMINVALUE INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_climbings START WITH 21 NOMAXVALUE MINVALUE 21 INCREMENT BY 1 NOCACHE NOCYCLE;

CREATE OR REPLACE TRIGGER MOUNT_ID_GENERATE BEFORE INSERT ON MOUNTAINS FOR EACH ROW
    BEGIN
        :new.MOUNT_ID := seq_mountains.NEXTVAL;
    END;

CREATE OR REPLACE TRIGGER GROUP_ID_GENERATE BEFORE INSERT ON GROUPS FOR EACH ROW
    BEGIN
        :new.GROUP_ID := seq_group.NEXTVAL;
    END;

CREATE OR REPLACE TRIGGER GROUPMEMB_ID_GENERATE BEFORE INSERT ON GROUPMEMBERSHIP FOR EACH ROW
    BEGIN
        :new.GM_ID := seq_groupmembership.NEXTVAL;
    END;

CREATE OR REPLACE TRIGGER MOUNTAINCLIMBING_ID_GENERATE BEFORE INSERT ON MOUNTAINCLIMBING FOR EACH ROW
    BEGIN
        :new.MC_ID := seq_climbings.NEXTVAL;
    END;

CREATE OR REPLACE PACKAGE ALPCLUBMANAGER
    AS 
       PROCEDURE ADD_NEW_MOUNTAIN (mount_name VARCHAR2, mount_height NUMBER, mount_con VARCHAR2, mount_distr VARCHAR2);
       PROCEDURE ADD_NEW_GROUP (group_name VARCHAR2);
       PROCEDURE ADD_NEW_GROUPMEMBERSHIP (g_id NUMBER, a_id NUMBER);
       PROCEDURE ADD_NEW_MOUNTAINCLIMBING (CL_BEGIN VARCHAR2, CL_END VARCHAR2, m_id NUMBER, g_id NUMBER);
       PROCEDURE UPDATE_MOUNTAIN (m_id NUMBER, mount_name VARCHAR2, mount_height NUMBER, mount_con VARCHAR2);
       PROCEDURE GET_GROUP_FOR_ALL_MOUNTAINS;
       PROCEDURE GET_ALPINISTS_DATES (INT_BEGIN VARCHAR2, INT_END VARCHAR2);
       PROCEDURE GET_GROUP_CLIMBINGS_DATES (INT_BEGIN VARCHAR2, INT_END VARCHAR2);
       PROCEDURE COUNT_EACH_ALPINIST_CLIMBINGS;
       PROCEDURE COUNT_ALL_CLIMBINGS;
END ALPCLUBMANAGER;

CREATE OR REPLACE PACKAGE BODY ALPCLUBMANAGER AS

    PROCEDURE ADD_NEW_MOUNTAIN (mount_name VARCHAR2, mount_height NUMBER, mount_con VARCHAR2, mount_distr VARCHAR2) IS
        BEGIN
            INSERT INTO MOUNTAINS (NAME, HEIGHT, COUNTRY, DISTRICT) VALUES (mount_name, mount_height, mount_con, mount_distr);
        END ADD_NEW_MOUNTAIN;
    
    PROCEDURE ADD_NEW_GROUP (group_name VARCHAR2) IS
        BEGIN
            INSERT INTO GROUPS (GROUPNAME) VALUES(group_name);
        END ADD_NEW_GROUP;

    PROCEDURE ADD_NEW_GROUPMEMBERSHIP (g_id NUMBER, a_id NUMBER) IS
        BEGIN
            INSERT INTO GROUPMEMBERSHIP (GROUP_ID, ALP_ID) VALUES(g_id, a_id);
        END ADD_NEW_GROUPMEMBERSHIP;

    PROCEDURE ADD_NEW_MOUNTAINCLIMBING (CL_BEGIN VARCHAR2, CL_END VARCHAR2, m_id NUMBER, g_id NUMBER) IS
        BEGIN
            INSERT INTO MOUNTAINCLIMBING (CLBEGIN, CLEND, MOUNT_ID, GROUP_ID) VALUES(TO_DATE(CL_BEGIN,'DD.MM.YYYY'), TO_DATE(CL_END,'DD.MM.YYYY'), m_id, g_id);
        END ADD_NEW_MOUNTAINCLIMBING;

    PROCEDURE UPDATE_MOUNTAIN (m_id NUMBER, mount_name VARCHAR2, mount_height NUMBER, mount_con VARCHAR2) 
        IS
            COUNTVISITS INTEGER;
            CANT_UPDATE EXCEPTION;
        BEGIN
            SELECT COUNT(*) INTO COUNTVISITS FROM MOUNTAINCLIMBING WHERE MOUNT_ID = m_id;
            IF COUNTVISITS = 0 THEN
                UPDATE MOUNTAINS SET NAME = mount_name, HEIGHT = mount_height, COUNTRY = mount_con WHERE MOUNT_ID = m_id;
            ELSE
                RAISE CANT_UPDATE;
            END IF;
            EXCEPTION WHEN CANT_UPDATE THEN
                DBMS_OUTPUT.PUT_LINE('Вы не можете обновить данную вершину, поскольку на неё уже были совершены восхождения.');
        END UPDATE_MOUNTAIN;

    PROCEDURE GET_GROUP_FOR_ALL_MOUNTAINS --Хронолический список для каждой горы
        IS 
            CUR_MOUNTAIN INTEGER := 0;
            MOUNTAIN_NAME VARCHAR2(50);
            GROUP_NAME VARCHAR2(50);
            M_ID MOUNTAINCLIMBING.MOUNT_ID%TYPE;
            CL_BEG MOUNTAINCLIMBING.CLBEGIN%TYPE;
            CL_END MOUNTAINCLIMBING.CLEND%TYPE;
            G_ID MOUNTAINCLIMBING.GROUP_ID%TYPE;
            Cursor Curs IS SELECT MOUNT_ID, CLBEGIN, CLEND, GROUP_ID FROM MOUNTAINCLIMBING ORDER BY MOUNT_ID, CLBEGIN;
        BEGIN
            OPEN Curs;
            FETCH Curs INTO M_ID, CL_BEG, CL_END, G_ID;
            WHILE Curs%FOUND LOOP
                IF M_ID > CUR_MOUNTAIN THEN
                    SELECT NAME INTO MOUNTAIN_NAME FROM MOUNTAINS WHERE MOUNT_ID = M_ID;
                    DBMS_OUTPUT.PUT_LINE('');
                    DBMS_OUTPUT.PUT_LINE('Список групп, побывавших на горе '||MOUNTAIN_NAME||': ');
                    CUR_MOUNTAIN := M_ID;
                END IF;
                SELECT GROUPNAME INTO GROUP_NAME FROM GROUPS WHERE GROUP_ID = G_ID;
                DBMS_OUTPUT.PUT_LINE('Группа '||GROUP_NAME||', восхождение с '||TO_CHAR(CL_BEG, 'DD.MM.YYYY')||' по '||TO_CHAR(CL_END, 'DD.MM.YYYY'));
                FETCH Curs INTO M_ID, CL_BEG, CL_END, G_ID;
            END LOOP;
        END GET_GROUP_FOR_ALL_MOUNTAINS;

    PROCEDURE GET_ALPINISTS_DATES (INT_BEGIN VARCHAR2, INT_END VARCHAR2) -- побывавшие в интервал дат
        IS
            INT_BEGIN_FORMAT DATE := TO_DATE(INT_BEGIN,'DD.MM.YYYY');
            INT_END_FORMAT DATE := TO_DATE(INT_END,'DD.MM.YYYY');
            G_ID MOUNTAINCLIMBING.GROUP_ID%TYPE;
            Cursor Curs IS SELECT GROUP_ID FROM MOUNTAINCLIMBING WHERE (CLBEGIN >= INT_BEGIN_FORMAT AND CLBEGIN <= INT_END_FORMAT) OR 
                                                                       (CLEND >= INT_BEGIN_FORMAT AND CLEND <= INT_END_FORMAT) OR 
                                                                       (CLBEGIN >= INT_BEGIN_FORMAT AND CLEND <= INT_END_FORMAT);
        BEGIN
            OPEN Curs;
            FETCH Curs INTO G_ID;
            WHILE Curs%FOUND LOOP
                FOR curs1 IN (SELECT DISTINCT NAME FROM ALPINIST WHERE ALP_ID IN 
                             (SELECT ALP_ID FROM GROUPMEMBERSHIP WHERE GROUP_ID = G_ID)) LOOP
                    DBMS_OUTPUT.PUT_LINE(curs1.NAME); 
                END LOOP;
                FETCH Curs INTO G_ID;
            END LOOP;
        END GET_ALPINISTS_DATES;

    PROCEDURE GET_GROUP_CLIMBINGS_DATES (INT_BEGIN VARCHAR2, INT_END VARCHAR2) -- побывавшие группы в интервал дат
        IS
            INT_BEGIN_FORMAT DATE := TO_DATE(INT_BEGIN,'DD.MM.YYYY');
            INT_END_FORMAT DATE := TO_DATE(INT_END,'DD.MM.YYYY');
            C_ID MOUNTAINCLIMBING.MC_ID%TYPE;
            C_BEG MOUNTAINCLIMBING.CLBEGIN%TYPE;
            C_END MOUNTAINCLIMBING.CLEND%TYPE;
            M_ID MOUNTAINCLIMBING.MOUNT_ID%TYPE;
            G_ID MOUNTAINCLIMBING.GROUP_ID%TYPE;
            MOUNTAIN_NAME VARCHAR(50);
            GROUP_NAME VARCHAR(50);
            Cursor Curs IS SELECT * FROM MOUNTAINCLIMBING WHERE ((CLBEGIN >= INT_BEGIN_FORMAT AND CLBEGIN <= INT_END_FORMAT) OR 
                                                                (CLEND >= INT_BEGIN_FORMAT AND CLEND <= INT_END_FORMAT) OR 
                                                                (CLBEGIN >= INT_BEGIN_FORMAT AND CLEND <= INT_END_FORMAT)) ORDER BY MC_ID ;
        BEGIN
            OPEN Curs;
            FETCH Curs INTO C_ID, C_BEG, C_END, M_ID, G_ID;
            WHILE Curs%FOUND LOOP
                SELECT GROUPNAME INTO GROUP_NAME FROM GROUPS WHERE GROUP_ID = G_ID;
                SELECT NAME INTO MOUNTAIN_NAME FROM MOUNTAINS WHERE MOUNT_ID = M_ID;
                DBMS_OUTPUT.PUT_LINE('Номер в бд: '||C_ID||'. С '||TO_CHAR(C_BEG, 'DD.MM.YYYY')||' по '||TO_CHAR(C_END, 'DD.MM.YYYY')||'. Гора: '||MOUNTAIN_NAME||', группа: '||GROUP_NAME); 
                FETCH Curs INTO C_ID, C_BEG, C_END, M_ID, G_ID;
            END LOOP;
        END GET_GROUP_CLIMBINGS_DATES;

    PROCEDURE COUNT_EACH_ALPINIST_CLIMBINGS -- сколько раз каждый альпинист был на каждой из гор 
        IS
            COUNTRESULT INTEGER;
            A_ID ALPINIST.ALP_ID%TYPE;
            A_NAME ALPINIST.NAME%TYPE;
            Cursor Curs IS SELECT ALP_ID, NAME FROM ALPINIST ORDER BY ALP_ID;
        BEGIN
            OPEN Curs;
            FETCH Curs INTO A_ID, A_NAME;
            WHILE Curs%FOUND LOOP
                DBMS_OUTPUT.PUT_LINE('Количество посещений гор участником '||A_NAME);
                FOR curs1 IN (SELECT MOUNT_ID, NAME FROM MOUNTAINS) LOOP
                    SELECT COUNT(*) INTO COUNTRESULT FROM (SELECT * FROM MOUNTAINCLIMBING WHERE (MOUNT_ID = curs1.MOUNT_ID AND GROUP_ID IN 
                                                          (SELECT GROUP_ID FROM GROUPMEMBERSHIP WHERE GROUPMEMBERSHIP.ALP_ID = A_ID)));
                    DBMS_OUTPUT.PUT_LINE('Гора '||curs1.NAME||': '||COUNTRESULT||' раз');
                END LOOP;
                DBMS_OUTPUT.PUT_LINE('');
                FETCH Curs INTO A_ID, A_NAME;
            END LOOP;
        END COUNT_EACH_ALPINIST_CLIMBINGS;
        
    PROCEDURE COUNT_ALL_CLIMBINGS -- побывавшие на каждой из гор 
        IS
            COUNTRESULT INTEGER;
            M_ID MOUNTAINS.MOUNT_ID%TYPE;
            M_NAME MOUNTAINS.NAME%TYPE;
            Cursor Curs IS SELECT MOUNT_ID, NAME FROM MOUNTAINS ORDER BY MOUNT_ID;
        BEGIN
            OPEN Curs;
            FETCH Curs INTO M_ID, M_NAME;
            WHILE Curs%FOUND LOOP
                SELECT COUNT(*) INTO COUNTRESULT FROM ALPINIST WHERE ALP_ID IN 
                    (SELECT ALP_ID FROM GROUPMEMBERSHIP WHERE GROUP_ID IN 
                        (SELECT GROUP_ID FROM MOUNTAINCLIMBING WHERE MOUNT_ID = M_ID));
                DBMS_OUTPUT.PUT_LINE('Число альпинистов, побывавших на горе '||M_NAME||': '||COUNTRESULT);
                FETCH Curs INTO M_ID, M_NAME;
            END LOOP;
        END COUNT_ALL_CLIMBINGS;

END ALPCLUBMANAGER;